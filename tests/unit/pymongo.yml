development:
  # Configure available database clients. (required)
  clients:
    # Define the default client. (required)
    default:
      # A uri may be defined for a client:
      # uri: 'mongodb://user:password@myhost1.mydomain.com:27017/my_db'
      # Please see driver documentation for details. Alternatively, you can
      # define the following:
      #
      # Define the name of the default database that Mongoid can connect to.
      # (required).
      database: my_db
      # Provide the hosts the default client can connect to. Must be an array
      # of host:port pairs. (required)
      hosts:
        - myhost1.mydomain.com:27017
        - myhost2.mydomain.com:27017
        - myhost3.mydomain.com:27017
      options:
        # These options are Ruby driver options, documented in
        # https://mongodb.com/docs/ruby-driver/current/reference/create-client/

        # Change the default write concern. (default = { w: 1 })
        write:
          w: 1

        # Change the default read preference. Valid options for mode are: :secondary,
        # :secondary_preferred, :primary, :primary_preferred, :nearest
        # (default: primary)
        read:
          mode: :secondary_preferred
          tag_sets:
            - use: web

        # The name of the user for authentication.
        user: 'user'

        # The password of the user for authentication.
        password: 'password'

        # The user's database roles.
        roles:
          - 'dbOwner'

        # Change the default authentication mechanism. Please see the
        # driver documentation linked above for details on how to configure
        # authentication. Valid options are :aws, :gssapi, :mongodb_cr,
        # :mongodb_x509, :plain, :scram and :scram256 (default on 3.0
        # and higher servers is :scram, default on 2.6 servers is :plain)
        auth_mech: :scram

        # Specify the auth source, i.e. the database or other source which
        # contains the user's login credentials. Allowed values for auth source
        # depend on the authentication mechanism, as explained in the server documentation:
        # https://mongodb.com/docs/manual/reference/connection-string/#mongodb-urioption-urioption.authSource
        # If no auth source is specified, the default auth source as
        # determined by the driver will be used. Please refer to:
        # https://mongodb.com/docs/ruby-driver/current/reference/authentication/#auth-source
        auth_source: admin

        # Connect directly to and perform all operations on the specified
        # server, bypassing replica set node discovery and monitoring.
        # Exactly one host address must be specified. (default: false)
        #direct_connection: true

        # Deprecated. Force the driver to connect in a specific way instead
        # of automatically discovering the deployment type and connecting
        # accordingly. To connect directly to a replica set node bypassing
        # node discovery and monitoring, use direct_connection: true instead
        # of this option. Possible values: :direct, :replica_set, :sharded.
        # (default: none)
        #connect: :direct

        # Change the default time in seconds the server monitors refresh their status
        # via hello commands. (default: 10)
        heartbeat_frequency: 10

        # The time in seconds for selecting servers for a near read preference. (default: 0.015)
        local_threshold: 0.015

        # The timeout in seconds for selecting a server for an operation. (default: 30)
        server_selection_timeout: 30

        # The maximum number of connections in the connection pool. (default: 5)
        max_pool_size: 5

        # The minimum number of connections in the connection pool. (default: 1)
        min_pool_size: 1

        # The time to wait, in seconds, in the connection pool for a connection
        # to be checked in before timing out. (default: 1)
        wait_queue_timeout: 1

        # The time to wait to establish a connection before timing out, in seconds.
        # (default: 10)
        connect_timeout: 10

        # How long to wait for a response for each operation sent to the
        # server. This timeout should be set to a value larger than the
        # processing time for the longest operation that will be executed
        # by the application. Note that this is a client-side timeout;
        # the server may continue executing an operation after the client
        # aborts it with the SocketTimeout exception.
        # (default: nil, meaning no timeout)
        socket_timeout: 5

        # The name of the replica set to connect to. Servers provided as seeds that do
        # not belong to this replica set will be ignored.
        replica_set: my_replica_set

        # Whether to connect to the servers via ssl. (default: false)
        ssl: true

        # The certificate file used to identify the connection against MongoDB.
        ssl_cert: /path/to/my.cert

        # The private keyfile used to identify the connection against MongoDB.
        # Note that even if the key is stored in the same file as the certificate,
        # both need to be explicitly specified.
        ssl_key: /path/to/my.key

        # A passphrase for the private key.
        ssl_key_pass_phrase: password

        # Whether or not to do peer certification validation. (default: true)
        ssl_verify: true

        # The file containing a set of concatenated certification authority certifications
        # used to validate certs passed from the other end of the connection.
        ssl_ca_cert: /path/to/ca.cert

        # Compressors to use. (default is to not use compression)
        compressors: [zlib]

  # Configure Mongoid-specific options. (optional)
  options:
    # Application name that is printed to the MongoDB logs upon establishing
    # a connection in server versions 3.4 or greater. Note that the name
    # cannot exceed 128 bytes in length. It is also used as the database name
    # if the database name is not explicitly defined. (default: nil)
    app_name: MyApplicationName

    # Mark belongs_to associations as required by default, so that saving a
    # model with a missing belongs_to association will trigger a validation
    # error. (default: true)
    belongs_to_required_by_default: true

    # Maintain broken behavior of sum over empty result sets for backwards
    # compatibility. When calculating a sum on a field with a null context,
    # for example:
    #
    # Product.none.sum(:price)
    #
    # ... return field name (`:price') instead of 0.
    #
    # When calculating a sum via a database query with an empty result set,
    # for example:
    #
    # Product.where(impossible_condition: true).sum(:price)
    #
    # ... return nil instead of 0.
    # (default: false)
    #broken_aggregables: true

    # Ignore aliased fields in embedded documents when performing pluck and
    # distinct operations, for backwards compatibility.
    # (default: false)
    #broken_alias_handling: true

    # Maintain broken `and' method behavior that existed in Mongoid 7.3
    # and earlier for backwards compatibility: in some situations, conditions
    # already present in a Criteria object would be replaced by newer
    # conditions when `and' method is used instead of the new conditions
    # being added to the existing conditions. This would happen when using
    # the same operator on the same field multiple times. For example:
    #
    # Band.where(id: 1).and({year: {'$in' => [2020]}}, {year: {'$in' => [2021]}}).where(id: 2)
    #
    # yields the following criteria:
    #
    # <Mongoid::Criteria
    # selector: {"_id"=>1, "year"=>{"$in"=>[2020]}, "$and"=>[{"_id"=>2}]}
    # options:  {}
    # class:    Band
    # embedded: false>
    #
    # This is obviously incorrect as the {"$in"=>[2021]} clause is lost.
    # Notice that the clause is only lost when both clauses are added using
    # the #and method.
    # (default: false)
    #broken_and: true

    # When exiting a nested `with_scope' block, set the current scope to
    # nil instead of the parent scope for backwards compatibility.
    # (default: false)
    #broken_scoping: true

    # Maintain broken update behavior in some cases for backwards
    # compatibility.
    #
    # In Mongoid 7.3 and earlier, when assigning a value to an embedded
    # document, then setting it to nil, then assigning the original value
    # to it again, the second update would not work and the value for the
    # embedded document would remain nil. Take this case:
    #
    # canvas.palette = palette
    # canvas.palette = nil
    # canvas.palette = palette
    #
    # ... where canvas embeds_one palette.
    #
    # In Mongoid 7.3 and earlier, canvas.palette would be nil when we would
    # expect it to be palette. Set this option to true to keep this behavior,
    # set the option to false to perform the second update correctly.
    # (default: false)
    #broken_updates: true

    # Time objects in Ruby have nanosecond precision, whereas MongoDB server
    # can only store times with millisecond precision. Set this option to
    # true to truncate times to millisecond precision when performing
    # queries on already loaded embedded associations (this is also called
    # "embedded matching" and is done completely in Ruby), to obtain the
    # same query results when performing time comparisons regardless of
    # which documents are being queried. Setting this option to false will
    # produce different results for queries on embedded associations that
    # are already loaded into memory vs queries on unloaded associations and
    # top-level models. (default: true)
    #compare_time_by_ms: false

    # Set the global discriminator key. (default: "_type")
    discriminator_key: "_type"

    # Raise an exception when a field is redefined. (default: false)
    duplicate_fields_exception: false

    # Include the root model name in json serialization. (default: false)
    include_root_in_json: false

    # Include the _type field in serialization. (default: false)
    include_type_for_serialization: false

    # Whether to join nested persistence contexts for atomic operations
    # to parent contexts by default. (default: false)
    join_contexts: false

    # When this flag is true, the attributes method on a document will return
    # a BSON::Document when that document is retrieved from the database, and
    # a Hash otherwise. When this flag is false, the attributes method will
    # always return a Hash. (default: false)
    #legacy_attributes: true

    # Maintain legacy behavior of pluck and distinct, which does not demongoize
    # values on returning them. Setting this option to false will cause
    # pluck and distinct to return demongoized values. Setting this option to
    # false will also allow retrieving *_translations fields from pluck and
    # distinct and will return embedded values themselves (i.e. without
    # putting them in a hash).
    # (default: false)
    #legacy_pluck_distinct: true

    # Maintain legacy behavior of === on Mongoid document classes, which
    # returns true in a number of cases where Ruby's === implementation would
    # return false. Note that the behavior of === on Mongoid document
    # instances differs from both the behavior of === on document classes
    # and from Ruby's behavior of === on simple object instances regardless
    # of the value of this option.
    # (default: false)
    #legacy_triple_equals: true

    # Set the Mongoid and Ruby driver log levels when Mongoid is not using
    # Ruby on Rails logger instance. (default: :info)
    log_level: :info

    # When using the BigDecimal field type, store the value in the database
    # as a BSON::Decimal128 instead of a string. (default: true)
    #map_big_decimal_to_decimal128: true

    # Force ``BSON::ObjectId#as_json`` method to return the hash
    # { "$oid" => id.to_s }. When this option is false, and bson-ruby 5
    # is used, the return value will be the hexadecimal ObjectId string only.
    # (default: false)
    #object_id_as_json_oid: true

    # When chaining the same operators that use the same field, setting this
    # feature flag to false will cause those operators to be combined using an
    # and. Setting this feature flag to true will cause the later chained
    # operators to overwrite the earlier ones. (default: false)
    #overwrite_chained_operators: false

    # Preload all models in development, needed when models use
    # inheritance. (default: false)
    preload_models: false

    # Raise an error when performing a #find and the document is not found.
    # (default: true)
    raise_not_found_error: true

    # Raise an error when defining a scope with the same name as an
    # existing method. (default: false)
    scope_overwrite_exception: false

    # Use ActiveSupport's time zone in time operations instead of
    # the Ruby default time zone. See the time zone section below for
    # further information. (default: true)
    use_activesupport_time_zone: true

    # Return stored times as UTC. See the time zone section below for
    # further information. Most applications should not use this option.
    # (default: false)
    use_utc: false

    # (Deprecated) In MongoDB 4.0 and earlier, set whether to create
    # indexes in the background by default. (default: false)
    background_indexing: false
  # Configure driver-specific options. (optional)
  driver_options:
    # When this flag is turned off, inline options will be correctly
    # propagated to Mongoid and Driver finder methods. When this flag is turned
    # on those options will be ignored. For example, with this flag turned
    # off, Band.all.limit(1).count will take the limit into account, while
    # when this flag is turned on, that limit is ignored. The affected driver
    # methods are: aggregate, count, count_documents, distinct, and
    # estimated_document_count. The corresponding Mongoid methods are also
    # affected. (default: false, driver version: 2.18.0+)
    #broken_view_options: false

    # Validates that there are no atomic operators (those that start with $)
    # in the root of a replacement document, and that there are only atomic
    # operators at the root of an update document. If this feature flag is on,
    # an error will be raised on an invalid update or replacement document,
    # if not, a warning will be output to the logs. This flag does not affect
    # Mongoid as of 8.0, but will affect calls to driver update/replace
    # methods. (default: false, driver version: 2.18.0+)
    #validate_update_replace: false
